package ManishLokesh.Neptune.v2.Orders.Service;import ManishLokesh.Neptune.v1.OutletsAndMenu.Entity.Outlet;import ManishLokesh.Neptune.v1.OutletsAndMenu.Repository.OutletRepo;import ManishLokesh.Neptune.v2.Orders.Entity.Orders;import ManishLokesh.Neptune.v2.Orders.Repository.OrderItemsRepository;import ManishLokesh.Neptune.v2.Orders.RequestBody.OrderPushToIRCTC.CustomerInfo;import ManishLokesh.Neptune.v2.Orders.RequestBody.OrderPushToIRCTC.OrderPushToIRCTC;import ManishLokesh.Neptune.v2.Orders.RequestBody.OrderPushToIRCTC.OutletInfo;import ManishLokesh.Neptune.v2.Orders.ResponseBody.OrderResponseBody;import ManishLokesh.Neptune.v2.customer.Entity.Customer;import ManishLokesh.Neptune.v2.customer.Repository.CustLoginRepo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.http.*;import org.springframework.stereotype.Service;import org.springframework.beans.factory.annotation.*;import org.springframework.web.client.RestTemplate;import java.util.Optional;@Servicepublic class OrderPushService {    @Autowired    public OrderItemsRepository orderItemsRepository;    @Autowired    public OutletRepo outletRepo;    @Autowired    public CustLoginRepo custLoginRepo;    public Logger logger = LoggerFactory.getLogger("app.v2.orderPush.service");    private RestTemplate restTemplate;    private final String EcateUrl;    private final String AuthToken;    @Autowired    public OrderPushService(RestTemplate restTemplate, @Value("${E-catering.stage.url}") String ecateUrl,                            @Value("${E-catering.auth.token}") String authToken){        this.restTemplate = restTemplate;        this.EcateUrl = ecateUrl;        this.AuthToken = authToken;    }    public String PushOrder(OrderResponseBody orders){        logger.info("order is push to irctc");//        Long customerId = Long.valueOf(orders.getCustomerId());        var customer = orders.getCustomerDetail();        CustomerInfo customerInfo = new CustomerInfo();        customerInfo.setFullName(customer.get().getFullName());        customerInfo.setEmail(customer.get().getEmailId());        customerInfo.setMobile(customer.get().getMobileNumber());        Long outletId = Long.valueOf(orders.getOutletId());        Optional<Outlet> outlet = outletRepo.findById(outletId);        OutletInfo outletInfo = new OutletInfo();        outletInfo.setId(outlet.get().getId());        outletInfo.setName(outlet.get().getOutletName());        OrderPushToIRCTC orderPush = new OrderPushToIRCTC();        orderPush.setCustomer(customerInfo);        orderPush.setOutlet(outletInfo);        orderPush.setOrderItems(orders.getOrderItems());        HttpHeaders httpHeaders = new HttpHeaders();        httpHeaders.setContentType(MediaType.APPLICATION_JSON);        httpHeaders.add("Authorization",AuthToken);        Object response = this.restTemplate.exchange(                EcateUrl+"api/v1/order/vendor",                HttpMethod.POST,                new HttpEntity<>(orderPush,httpHeaders),                Object.class        ).getBody();        logger.info("response {}",response);        return null;    }}