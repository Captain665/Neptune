package ManishLokesh.Neptune.v2.Orders.Service;import ManishLokesh.Neptune.v1.OutletsAndMenu.Entity.Outlet;import ManishLokesh.Neptune.v1.OutletsAndMenu.Repository.OutletRepo;import ManishLokesh.Neptune.v2.Orders.Entity.OrderItems;import ManishLokesh.Neptune.v2.Orders.Entity.Orders;import ManishLokesh.Neptune.v2.Orders.Repository.OrderItemsRepository;import ManishLokesh.Neptune.v2.Orders.RequestBody.OrderPushToIRCTC.CustomerInfo;import ManishLokesh.Neptune.v2.Orders.RequestBody.OrderPushToIRCTC.OrderItemsInfo;import ManishLokesh.Neptune.v2.Orders.RequestBody.OrderPushToIRCTC.OrderPushToIRCTC;import ManishLokesh.Neptune.v2.Orders.RequestBody.OrderPushToIRCTC.OutletInfo;import ManishLokesh.Neptune.v2.Orders.ResponseBody.OrderResponseBody;import ManishLokesh.Neptune.v2.customer.Entity.Customer;import ManishLokesh.Neptune.v2.customer.Repository.CustLoginRepo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.http.*;import org.springframework.stereotype.Service;import org.springframework.beans.factory.annotation.*;import org.springframework.web.client.RestTemplate;import java.util.ArrayList;import java.util.List;import java.util.Optional;@Servicepublic class OrderPushService {    @Autowired    public OrderItemsRepository orderItemsRepository;    @Autowired    public OutletRepo outletRepo;    @Autowired    public CustLoginRepo custLoginRepo;    public Logger logger = LoggerFactory.getLogger("app.v2.orderPush.service");    private RestTemplate restTemplate;    private final String EcateUrl;    private final String AuthToken;    @Autowired    public OrderPushService(RestTemplate restTemplate, @Value("${E-catering.stage.url}") String ecateUrl,                            @Value("${E-catering.auth.token}") String authToken){        this.restTemplate = restTemplate;        this.EcateUrl = ecateUrl;        this.AuthToken = authToken;    }    public String PushOrder(Orders orders){        logger.info("order is push to irctc");        logger.info("request body " + orders);        Long customerId = Long.valueOf(orders.getCustomerId());        Optional<Customer> customer = custLoginRepo.findById(customerId);        CustomerInfo customerInfo = new CustomerInfo();        customerInfo.setFullName(customer.get().getFullName());        customerInfo.setEmail(customer.get().getEmailId());        customerInfo.setMobile(customer.get().getMobileNumber());        logger.info("customer id" + customerId);        logger.info("customer details " + customerInfo);        Long outletId = Long.valueOf(orders.getOutletId());        Optional<Outlet> outlet = outletRepo.findById(outletId);        OutletInfo outletInfo = new OutletInfo();        outletInfo.setId(outlet.get().getId());        outletInfo.setName(outlet.get().getOutletName());        outletInfo.setAddress(outlet.get().getAddress());        outletInfo.setCity(outlet.get().getCity());        outletInfo.setState(outlet.get().getState());        outletInfo.setPinCode("110001");        outletInfo.setContactNumbers(outlet.get().getMobileNo());        outletInfo.setRelationshipManagerName(outlet.get().getCompanyName());        outletInfo.setRelationshipManagerEmail(outlet.get().getEmailId());        outletInfo.setRelationshipManagerPhone(outlet.get().getMobileNo());        outletInfo.setFssaiNumber(outlet.get().getFssaiNo());        outletInfo.setFssaiCutOffDate(outlet.get().getFssaiValidUpto());        logger.info("outlet id" + outletId);        logger.info("outlet details " + outletInfo);        String orderId = String.valueOf(orders.getId());        List<OrderItemsInfo> orderItemInfoList = new ArrayList<>();        List<OrderItems> orderItems = orderItemsRepository.findByOrderId(orderId);        for (OrderItems orderItems1 : orderItems){            OrderItemsInfo orderItemsInfo = new OrderItemsInfo();            orderItemsInfo.setItemId(orderItems1.getItemId());            orderItemsInfo.setItemName(orderItems1.getItemName());            orderItemsInfo.setDescription(orderItems1.getDescription());            orderItemsInfo.setBasePrice(orderItems1.getBasePrice());            orderItemsInfo.setTaxRate(orderItems1.getTax());            orderItemsInfo.setSellingPrice(orderItems1.getSellingPrice());            orderItemsInfo.setVegetarian(orderItems1.getVeg());            orderItemsInfo.setQuantity(orderItems1.getQuantity());            orderItemsInfo.setOption("");            orderItemInfoList.add(orderItemsInfo);            logger.info("order items is added");        }        logger.info("order id " + orderId);        logger.info("order items info " + orderItemInfoList);//        OrderPushToIRCTC orderPush = new OrderPushToIRCTC();//        orderPush.setCustomer(customerInfo);//        orderPush.setOutlet(outletInfo);//        orderPush.setVendorOrderId(orders.getId());//        orderPush.setAlternateMobileNumber("");//        orderPush.setComment("");//        orderPush.setBookingDate(orders.getBookingDate());//        orderPush.setDeliveryDate(orders.getDeliveryDate());//        orderPush.setPnr(orders.getPnr());//        orderPush.setTrainName(orders.getTrainName());//        orderPush.setTrainNo(orders.getTrainNo());//        orderPush.setStationCode(orders.getStationCode());//        orderPush.setStationName(orders.getStationName());//        orderPush.setCoach(orders.getCoach());//        orderPush.setBerth(orders.getBerth());//        orderPush.setTotalAmount(orders.getTotalAmount());//        orderPush.setGst(orders.getDeliveryCharge());//        orderPush.setDeliveryCharge(orders.getDeliveryCharge());//        orderPush.setDiscountAmount(0.0);//        orderPush.setAmountPayable(orders.getPayable_amount());//        orderPush.setPaymentType(orders.getPaymentType());//        orderPush.setOrderItems(orderItemInfoList);        HttpHeaders httpHeaders = new HttpHeaders();        httpHeaders.setContentType(MediaType.APPLICATION_JSON);        httpHeaders.add("Authorization",AuthToken);        Object response = this.restTemplate.exchange(                EcateUrl+"api/v1/order/vendor",                HttpMethod.POST,                new HttpEntity<>(httpHeaders),                Object.class        ).getBody();        logger.info("response {}",response);        logger.info("order push is completed");        return "order service is run";    }}