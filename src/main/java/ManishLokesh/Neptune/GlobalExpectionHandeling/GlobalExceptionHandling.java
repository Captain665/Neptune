package ManishLokesh.Neptune.GlobalExpectionHandeling;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Objects;import java.util.stream.Collectors;import ManishLokesh.Neptune.ResponseDTO.ResponseDTO;import com.fasterxml.jackson.databind.exc.InvalidFormatException;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.http.converter.HttpMessageNotReadableException;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.context.request.WebRequest;import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;@ControllerAdvicepublic class GlobalExceptionHandling extends ResponseEntityExceptionHandler {    @Override    protected ResponseEntity<Object> handleMethodArgumentNotValid(            MethodArgumentNotValidException ex, HttpHeaders headers,            HttpStatus status, WebRequest request    ) {        // Extract field-specific error messages        List<Map<String, String>> errors = ex.getBindingResult()                .getFieldErrors()                .stream()                .map(fieldError -> {                    Map<String, String> errorDetails = new HashMap<>();                    errorDetails.put("field", fieldError.getField());                    errorDetails.put("message", fieldError.getDefaultMessage());                    return errorDetails;                })                .collect(Collectors.toList());        return new ResponseEntity<>(new ResponseDTO<>("failure", "Validation failed", errors), HttpStatus.BAD_REQUEST);    }    @ExceptionHandler(Exception.class)    public ResponseEntity<Object> handleGeneralException(Exception ex, WebRequest request) {        Map<String, Object> body = new HashMap<>();        body.put("timestamp", System.currentTimeMillis());        body.put("status", HttpStatus.INTERNAL_SERVER_ERROR.value());        body.put("error", "Internal Server Error");        body.put("message", ex.getMessage());        body.put("path", request.getDescription(false).replace("uri=", ""));        return new ResponseEntity<>(body, HttpStatus.INTERNAL_SERVER_ERROR);    }    @Override    protected ResponseEntity<Object> handleHttpMessageNotReadable(HttpMessageNotReadableException ex, HttpHeaders headers,                                                                  HttpStatus status, WebRequest request) {        String message = "Request body format is not correct, Please fix request body and try again!";        return new ResponseEntity<>(new ResponseDTO<>("failure", message, null), HttpStatus.BAD_REQUEST);    }    @ExceptionHandler(InvalidFormatException.class)    public ResponseEntity<Object> handleInvalidFormatException(InvalidFormatException ex) {        String errorMessage = "Invalid format: " + ex.getValue();        Map<String, String> body = new HashMap<>();        body.put("error", errorMessage);        return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);    }}